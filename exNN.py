import streamlit as st
from PIL import Image

def exNN():
    st.title('ü§ìExplain-About-Neural Network(Deep Learning)')
    st.write('‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô sidebar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Multi-page ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ')
    st.markdown("""<h1 style='text-align: center;'>‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Neural Network</h1>""", unsafe_allow_html=True)
    tab1, tab2, tab3= st.tabs([
        "‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•&dataset",
        "‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        "‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢ : CNN",
    ])
    with tab1:
        st.markdown("""<h4 style='text-align: center;text-indent: 2.5em;'>
   ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•&dataset
    </h4>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='text-indent: 2.5em;'>
    ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏≤
    </h5>""", unsafe_allow_html=True)
        st.markdown("""<p style='text-align: justify;'>
                    ¬†¬†¬†¬†¬†¬†‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å <a href="https://www.kaggle.com/datasets/deepcontractor/is-that-santa-image-classification" target="_blank">Kaggle</a>
                    ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Santa ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô santa <br>
                    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ classification(image classification) ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô santa ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô santa ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á
                    </p>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='text-indent: 2.5em;'>
    Dataset
    </h5>""", unsafe_allow_html=True)
        Img = Image.open("imageforweb/ISsanta.PNG")
        resized_img = Img.resize((1496, 475))
        st.image(resized_img)

        st.markdown("""<h5 style='text-align: center;text-indent: 2.5em;'>
    (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á dataset ‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ù‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô santa)
    </h5>""", unsafe_allow_html=True)
        
        Img = Image.open("imageforweb/ISnotsanta.PNG")
        resized_img = Img.resize((1496, 475))
        st.image(resized_img)

        st.markdown("""<h5 style='text-align: center;text-indent: 2.5em;'>
    (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á dataset ‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ù‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πâ‡πÄ‡∏õ‡πá‡∏ô santa)
    </h5>""", unsafe_allow_html=True)
        


    with tab2:
        st.markdown("""<h4 style='text-align: center;text-indent: 2.5em;'>
    ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    </h4>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='text-indent: 2.5em;'>
    How to prep?
    </h5>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='text-indent: 2.5em;'>
    1.upload ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• dataset ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        </h5>""", unsafe_allow_html=True)
        code ='''import zipfile
import os
for file in uploaded.keys():
    with zipfile.ZipFile(file, 'r') as zip_ref:
        zip_ref.extractall('dataset')'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
        st.markdown("""<h5 style='text-indent: 2.5em;'>
    2.‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û (Image Preprocessing)
‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á Deep Learning ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô Image Classification
‡πÇ‡∏°‡πÄ‡∏î‡∏• CNN ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏î‡∏¥‡∏ö‡πÜ ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô resize, normalize, augmentation ‡∏Ø‡∏•‡∏Ø
        </h5>""", unsafe_allow_html=True)
        code = '''import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import numpy as np
import random
import os

#‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÅ‡∏¢‡∏Å‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô 2 ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏ô
train_path = 'dataset/is that santa/train' #‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå train_path ‚Üí ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (Training Data)
test_path = 'dataset/is that santa/test' #‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå test_path ‚Üí ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• (Testing Data)

train_datagen = ImageDataGenerator(rescale=1./255,  #üîπ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:rescale=1./255 ‚Üí Normalize ‡∏†‡∏≤‡∏û (‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1 ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0-255)
                                   rotation_range=20,    #üîπ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:rotation_range=20 ‚Üí ‡∏´‡∏°‡∏∏‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏≠‡∏á‡∏®‡∏≤ (‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô)
                                   zoom_range=0.2,  #üîπ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: zoom_range=0.2 ‚Üí ‡∏ã‡∏π‡∏°‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏î‡πâ 20%
                                   horizontal_flip=True,    #üîπ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: horizontal_flip=True ‚Üí ‡∏û‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
                                   validation_split=0.2) 

#üí° Data Augmentation ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
#üí° ‡∏ä‡πà‡∏ß‡∏¢ ‡∏•‡∏î Overfitting ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏à‡∏î‡∏à‡∏≥‡πÅ‡∏ï‡πà‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏°‡πÜ


train_generator = train_datagen.flow_from_directory(
    train_path,     #üîπ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: flow_from_directory() ‚Üí ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ‡πÅ‡∏•‡∏∞ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
    target_size=(150,150),  #üîπ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:target_size=(150, 150) ‚Üí ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô 150x150 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
    batch_size=32,  #üîπ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:batch_size=32 ‚Üí ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡∏•‡∏∞ 32 ‡∏£‡∏π‡∏õ ‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
    class_mode='categorical',   #üîπ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:class_mode='binary' ‚Üí ‡∏°‡∏µ 2 classes (0 = Not Santa / 1 = Santa)
    subset='training'
)

val_generator = train_datagen.flow_from_directory(
    train_path,
    target_size=(150,150),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

#üîπ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û (ImageDataGenerator) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Testing
#‡∏°‡∏µ‡πÅ‡∏Ñ‡πà rescale=1./255 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!
#‡πÑ‡∏°‡πà‡∏°‡∏µ Augmentation (‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏°‡∏∏‡∏ô‡∏†‡∏≤‡∏û, ‡∏û‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Test Set ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô ‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    test_path,
    target_size=(150,150),
    batch_size=32,
    class_mode='categorical',
    shuffle=False
)'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

    with tab3:
        st.markdown("""<h4 style='text-align: center;text-indent: 2.5em;'>
    ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• CNN
    </h4>""", unsafe_allow_html=True)
        
        st.markdown("""<h5 style='text-indent: 2.5em;'>
    CNN ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á
    </h5>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='text-indent: 2.5em;'>
    CNN (Convolutional Neural Network) ‡∏´‡∏£‡∏∑‡∏≠ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Ç‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡πÄ‡∏ó‡∏µ‡∏¢‡∏°‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ß‡∏•‡∏π‡∏ä‡∏±‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Ç‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡πÄ‡∏ó‡∏µ‡∏¢‡∏° (Neural Network) 
    ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û<br>
                    
    üîπ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á CNN : ‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà 3 ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                    
        -Convolutional Layer (‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ß‡∏•‡∏π‡∏ä‡∏±‡∏ô)
        ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå (Kernel) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞ (Feature) ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏≠‡∏ö (Edge) ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (Pattern) ‡πÉ‡∏ô‡∏†‡∏≤‡∏û
        ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏∞‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏±‡πà‡∏ß‡∏†‡∏≤‡∏û (Sliding) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ ‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ß‡∏•‡∏π‡∏ä‡∏±‡∏ô (Convolution) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Feature Map
    
        -Pooling Layer (‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡∏û‡∏π‡∏•‡∏•‡∏¥‡πà‡∏á)
        ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∑‡∏≠ Max Pooling ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì
    
        -Fully Connected Layer (‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
        ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏†‡∏≤‡∏û
    
        </h5>""", unsafe_allow_html=True)
        
        
        st.markdown("""<h5 style='text-indent: 2.5em;'>
    How to prep?
    </h5>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='text-indent: 2.5em;'>
    1.‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• CNN
    </h5>""", unsafe_allow_html=True)
        code = '''model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150,150,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(train_generator.num_classes, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()
#‚úÖ ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£?
#‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• CNN (Convolutional Neural Network) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞‡∏†‡∏≤‡∏û Santa

#Conv2D(32, (3,3)) ‚Üí ‡πÉ‡∏ä‡πâ 32 ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á (Filters) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
#MaxPooling2D(2,2) ‚Üí ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡∏á (Downsampling)
#Flatten() ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏°‡∏¥‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå 1 ‡∏°‡∏¥‡∏ï‡∏¥
#Dense(256, activation='relu') ‚Üí Fully Connected Layer ‡∏ó‡∏µ‡πà‡∏°‡∏µ 256 ‡∏ô‡∏¥‡∏ß‡∏£‡∏≠‡∏ô
#Dense(1, activation='sigmoid') ‚Üí ‡πÉ‡∏ä‡πâ Sigmoid ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å 2 class (Santa / Not Santa)'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
        st.markdown("""<h5 style='text-indent: 2.5em;'>
    üìå2.‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
    </h5>""", unsafe_allow_html=True)
        code = '''history = model.fit(train_generator, epochs=20, validation_data=test_generator)
#‚úÖ ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£?

#‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô model.fit() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• 20 ‡∏£‡∏≠‡∏ö (Epochs)
#‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å train_generator ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
#‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å test_generator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
#history ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏•‡∏∞ loss ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ plot ‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏î‡πâ'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
        st.markdown("""<h5 style='text-indent: 2.5em;'>
    üìå3.‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü Accuracy ‡πÅ‡∏•‡∏∞ Loss
    </h5>""", unsafe_allow_html=True)
        code = '''plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

#‚úÖ ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£?

#‡πÅ‡∏™‡∏î‡∏á ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏ì‡∏∞‡πÄ‡∏ó‡∏£‡∏ô
#‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Training Accuracy ‡∏Å‡∏±‡∏ö Validation Accuracy
#‡∏ñ‡πâ‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ß‡∏¥‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô ‚Üí ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà Overfitting'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
        st.markdown("""<h5 style='text-indent: 2.5em;'>
    üìå4.‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ö‡∏ô‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    </h5>""", unsafe_allow_html=True)
        code ='''test_loss, test_acc = model.evaluate(test_generator)
print(f"Test Accuracy: {test_acc:.2f}")

#‚úÖ ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£?

#‡∏ô‡∏≥‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Test Set
#‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (test_acc) ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ (test_loss)
#‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞ Santa ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)




