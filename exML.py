import streamlit as st
import pandas as pd
import random

def exML():
    st.title('ü§ìExplain-About-Machine-Learning')
    st.write('‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô sidebar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Multi-page ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ')
    st.markdown("""<h1 style='text-align: center;'>‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Machine learning</h1>""", unsafe_allow_html=True)
    tab1, tab2, tab3, tab4 = st.tabs([
        "‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•&dataset",
        "‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        "Random forest Model(RF)",
        "Gradient Boosting Regressor Model(GBR)"
    ])
    with tab1:
            st.markdown("""<h4 style='text-align: center;text-indent: 2.5em;'>
   ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•&dataset
    </h4>""", unsafe_allow_html=True)
            st.markdown("""<h5 style='text-indent: 2.5em;'>
    ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏≤
    </h5>""", unsafe_allow_html=True)
            st.markdown("""<p style='text-align: justify;'>
                    ¬†¬†¬†¬†¬†¬†‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å <a href="https://www.kaggle.com/datasets/hellbuoy/car-price-prediction" target="_blank">Kaggle</a>
                    ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏Ñ‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á spec ‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏£‡∏á‡∏°‡πâ‡∏≤(Horsepower),‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ(fuel type) ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô<br>
                    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Regression ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ñ‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏≠‡∏á
                    </p>""", unsafe_allow_html=True)
            st.markdown("""<h5 style='text-indent: 2.5em;'>
    Dataset
    </h5>""", unsafe_allow_html=True)
    
            df = pd.read_csv("dataset/CarPrice.csv")
            st.dataframe(df, use_container_width=True)
            st.markdown("""<p style='text-align: justify;'>
                        <li>1.Car_ID	: ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ</li><br>	
                        <li>2.Symboling : ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡πç‡∏≤‡∏´‡∏ô‡∏î ‡∏Ñ‡πà‡∏≤ +3 ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á -3 ‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</li><br>	
                        <li>3.carCompany : ‡∏Ñ‡πà‡∏≤‡∏¢‡∏£‡∏ñ</li><br>			
                        <li>4.fueltype : ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</li><br>		
                        <li>5.aspiration : ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ</li><br>		
                        <li>6.doornumber : ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π</li><br>	
                        <li>7.carbody : body‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ</li><br>	 		
                        <li>8.drivewheel : ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏•‡πâ‡∏≠‡∏Ç‡∏±‡∏ö</li><br>			
                        <li>9.enginelocation : ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå</li><br>	 	
                        <li>10.wheelbase : ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡πâ‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏á</li><br>				
                        <li>11.carlength : ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏ñ</li><br>	 	
                        <li>12.carwidth	: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏£‡∏ñ</li><br>		 		
                        <li>13.carheight : ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏£‡∏ñ</li><br>			
                        <li>14.curbweight : ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡πà‡∏≤</li><br>				
                        <li>15.enginetype : ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå</li><br>			
                        <li>16.cylindernumber : ‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏Å‡∏™‡∏π‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå</li><br>			
                        <li>17.enginesize : ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á</li><br>			
                        <li>18.fuelsystem : ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á</li><br>				
                        <li>19.boreratio : ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏Å‡∏™‡∏π‡∏ö</li><br>			
                        <li>20.stroke : ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏™‡∏π‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏ß‡∏≤‡∏î‡πÑ‡∏õ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏Å‡∏™‡∏π‡∏ö‡∏Ç‡∏ì‡∏∞‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà</li><br>			
                        <li>21.compressionratio	: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ</li><br>			
                        <li>22.horsepower : ‡πÅ‡∏£‡∏á‡∏°‡πâ‡∏≤</li><br>				
                        <li>23.peakrpm : ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</li><br>		
                        <li>24.citympg : ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡πà‡∏á‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á</li><br>				
                        <li>25.highwaympg : ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ö‡∏ô‡∏ß‡∏¥‡πà‡∏á‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏ß‡∏á</li><br>			
                        <li>26.price(Dependent variable) : ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ñ</li><br>				
                        </p>""", unsafe_allow_html=True)
    with tab2:
            st.markdown("""<h4 style='text-align: center;text-indent: 2.5em;'>
   ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    </h4>""", unsafe_allow_html=True)
            st.markdown("""<h5 style='text-indent: 2.5em;'>
    How to prep?
    </h5>""", unsafe_allow_html=True)
            st.markdown("""<h5 style='text-indent: 2.5em;'>
    1.upload ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• dataset ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    </h5>""", unsafe_allow_html=True)
            code = '''import pandas as pd
df = pd.read_csv('CarPrice.csv')
df.head()'''
            st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
            st.markdown("""<h5 style='text-indent: 2.5em;'>
    2.‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Streamlit ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
‡πÅ‡∏õ‡∏•‡∏á ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (categorical) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏î‡πâ‡∏ß‡∏¢ LabelEncoder
‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á preprocessing
    </h5>""", unsafe_allow_html=True)
            code ='''# üßπ STEP 3: Preprocessing for Selected Features
from sklearn.preprocessing import LabelEncoder

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà Streamlit ‡πÉ‡∏ä‡πâ
selected_features = ['symboling', 'fueltype', 'aspiration', 'doornumber', 'carbody',
                     'drivewheel', 'enginelocation', 'enginetype', 'cylindernumber',
                     'fuelsystem', 'wheelbase', 'curbweight', 'enginesize',
                     'horsepower', 'citympg', 'highwaympg']

# Drop ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ
df = df[selected_features + ['price']]

# ‡πÅ‡∏õ‡∏•‡∏á Label Encoding ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Streamlit
for col in df.select_dtypes(include='object').columns:
df[col] = LabelEncoder().fit_transform(df[col])

df.head()'''
            st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
            st.markdown("""<h5 style='text-indent: 2.5em;'>
    3.‡πÅ‡∏¢‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Training (80%) ‡πÅ‡∏•‡∏∞ Testing (20%)
‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•
    </h5>""", unsafe_allow_html=True)
            code = '''from sklearn.model_selection import train_test_split

X = df[selected_features]
y = df['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)'''
            st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
    with tab3:
            st.markdown("""<h4 style='text-align: center;text-indent: 2.5em;'>
    Random Forest Model
    </h4>""", unsafe_allow_html=True)
            st.markdown("""<p style='text-align: justify;'>
                    ¬†¬†¬†¬†¬†¬†üèûRandom Forest ‡∏Ñ‡∏∑‡∏≠ model ‡∏ó‡∏µ‡πà ‡∏ô‡∏≥ Decision Tree ‡∏´‡∏•‡∏≤‡∏¢‡πÜ tree ‡∏°‡∏≤ Train ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô (‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 10 ‡∏ï‡πâ‡∏ô ‡∏ñ‡∏∂‡∏á ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1000 ‡∏ï‡πâ‡∏ô)<br>
                    ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞ tree ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö feature ‡πÅ‡∏•‡∏∞ data ‡πÄ‡∏õ‡πá‡∏ô subset ‡∏Ç‡∏≠‡∏á feature ‡πÅ‡∏•‡∏∞ data ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î<br>
                    ‡πÅ‡∏ö‡∏ö random ‡∏ï‡∏≠‡∏ô‡∏ó‡∏≥ prediction ‡∏Å‡πá‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Decision Tree ‡∏ó‡∏≥ prediction ‡∏Ç‡∏≠‡∏á‡πÉ‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô<br>
                    ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏• final prediction ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ prediction ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î! ‚Äî technique ‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ bagging ‡∏´‡∏£‡∏∑‡∏≠ boostrapping
            </p>""", unsafe_allow_html=True)
            st.markdown("""<h5 style='text-indent: 2.5em;'>
    ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô model : Random forest
    </h5>""", unsafe_allow_html=True)
            code = '''from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
# RF Model
rf = RandomForestRegressor(
    n_estimators=100, #‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 100 ‡∏ï‡πâ‡∏ô‡πÉ‡∏ô forest
    max_depth=10,     #‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á tree ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà 10
    min_samples_split=5, #node ‡∏à‡∏∞‡πÅ‡∏ï‡∏Å‡∏Å‡∏¥‡πà‡∏á‡πÑ‡∏î‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 sample
    min_samples_leaf=4,  # leaf node ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 sample
    max_features='sqrt', # ‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚àö(n_features) ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ tree (‡∏•‡∏î overfitting ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° diversity)
    random_state=42 #‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô reproducible
)
rf.fit(X_train, y_train) #‚öô Training:
y_pred_rf = rf.predict(X_test) #üîÆ Prediction:

print("‚úÖ RF RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_rf))) #üìà Evaluation:
print("‚úÖ RF R2:", r2_score(y_test, y_pred_rf)) #üìà Evaluation:
#RMSE = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á target
#R¬≤ Score = ‡∏ß‡∏±‡∏î‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô (‡πÉ‡∏Å‡∏•‡πâ 1 = ‡∏î‡∏µ)''' 
            st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
    with tab4:
            st.markdown("""<h4 style='text-align: center;text-indent: 2.5em;'>
    Gradient Boosting Regressor Model
    </h4>""", unsafe_allow_html=True)
            st.markdown("""<p style='text-align: justify;'>
                    ¬†¬†¬†¬†¬†¬†Gradient Boosting Regressor Model ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
Gradient Boosting Regressor (GBR) ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á Boosting Algorithms ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô Regression (‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)<br>
‡πÇ‡∏î‡∏¢‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á Gradient Boosting ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÄ‡∏≠‡∏≤ weak learners (‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡πà‡∏≠‡∏ô) ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏°‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á strong learner (‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á)<br>
GBR ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏û‡∏£‡πà‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô<br>
-‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô<br>
-‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô<br>
-‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥<br>
-‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤<br>
            </p>""", unsafe_allow_html=True)
            st.markdown("""<p style='text-align: justify;'>
                    <b>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà GBR ‡πÄ‡∏õ‡πá‡∏ô Machine Learning</b><br>
-‡πÄ‡∏õ‡πá‡∏ô Supervised Learning<br>

GBR ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö (Labeled Data) ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á Supervised Learning
‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ (X) ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á (y)
‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á Decision Tree<br>

-GBR ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à (Decision Trees) ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ô Machine Learning<br>
‡πÉ‡∏ä‡πâ Boosting ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ML ‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°<br>

-Boosting ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡πà‡∏≠‡∏ô (Weak Learners) ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (Strong Learner)<br>
‡πÉ‡∏ä‡πâ Optimization Algorithm (Gradient Descent)<br>

-GBR ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ Gradient Descent Optimization ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á ML<br>
‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô Machine Learning ‡∏à‡∏£‡∏¥‡∏á<br>

-GBR ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏û‡∏£‡πà‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ô ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (Prediction) ‡πÅ‡∏•‡∏∞ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Analysis) ‡πÄ‡∏ä‡πà‡∏ô<br>
:‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô<br>
:‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®<br>
:‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à<br>
            </p>""", unsafe_allow_html=True)
            st.markdown("""<h5 style='text-indent: 2.5em;'>
    ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô model : Gradient Boosting Regressor
    </h5>""", unsafe_allow_html=True)
            code = '''from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
gbr = GradientBoostingRegressor(
    learning_rate=0.01, #‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ ‚Äî ‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏∞‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß, ‡∏•‡∏î overfitting ‡πÑ‡∏î‡πâ
    n_estimators=300, #‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (tree) ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ boosting
    max_depth=3, #	‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ tree (‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î overfitting)
    min_samples_split=5, #‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 sample ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÅ‡∏ï‡∏Å node ‡πÑ‡∏î‡πâ
    min_samples_leaf=5, #leaf node ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 sample
    subsample=0.8, #‡πÉ‡∏ä‡πâ sample ‡πÅ‡∏Ñ‡πà 80% ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ tree (‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î overfitting)
    random_state=42 #‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå reproducible (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°)
)
gbr.fit(X_train, y_train) #‚öô Training
y_pred_gbr = gbr.predict(X_test) #üîÆ Prediction

üìà Evaluation:
print("‚úÖ GBR RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_gbr)))
print("‚úÖ GBR R2:", r2_score(y_test, y_pred_gbr))
#RMSE = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á target
#R¬≤ Score = ‡∏ß‡∏±‡∏î‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô (‡πÉ‡∏Å‡∏•‡πâ 1 = ‡∏î‡∏µ)'''
            st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
                  
